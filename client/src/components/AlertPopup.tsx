import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { AlertTriangle, X, Eye, CheckCircle, Clock, Camera, MapPin, Volume2, VolumeX } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { useToast } from "@/hooks/use-toast";

export interface AlertPopupData {
  id: string;
  title: string;
  message: string;
  severity: "low" | "medium" | "high" | "critical";
  priority: "low" | "normal" | "urgent" | "immediate";
  type: string;
  cameraId?: string;
  location?: {
    area: string;
    coordinates?: { x: number; y: number };
    floor?: string;
  };
  metadata?: {
    confidence?: number;
    triggeredBy?: string;
    autoGenerated?: boolean;
    relatedAlerts?: string[];
    tags?: string[];
  };
  snapshot?: string;
  createdAt: string;
  responseTime?: number;
  actionTaken?: boolean;
}

export interface AlertPopupProps {
  alert: AlertPopupData;
  onAcknowledge: (alertId: string, notes?: string) => void;
  onDismiss: (alertId: string, reason?: string) => void;
  onEscalate: (alertId: string, newSeverity: string, reason?: string) => void;
  onViewCamera: (cameraId: string) => void;
  onClose: () => void;
  autoCloseTimeout?: number; // seconds
  soundEnabled?: boolean;
  position?: "top-right" | "top-left" | "bottom-right" | "bottom-left" | "center";
}

export function AlertPopup({ 
  alert, 
  onAcknowledge, 
  onDismiss, 
  onEscalate, 
  onViewCamera, 
  onClose,
  autoCloseTimeout = 30,
  soundEnabled = true,
  position = "top-right"
}: AlertPopupProps) {
  const [timeRemaining, setTimeRemaining] = useState(autoCloseTimeout);
  const [isVisible, setIsVisible] = useState(true);
  const [audioEnabled, setAudioEnabled] = useState(soundEnabled);
  const [notes, setNotes] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const { toast } = useToast();

  // Auto-close timer (only for low severity alerts)
  useEffect(() => {
    if (alert.severity === "low" || alert.severity === "medium") {
      const interval = setInterval(() => {
        setTimeRemaining(prev => {
          if (prev <= 1) {
            onClose();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);

      return () => clearInterval(interval);
    }
  }, [alert.severity, onClose]);

  // Audio notification
  useEffect(() => {
    if (audioEnabled && isVisible) {
      // Play alert sound based on severity
      const playAlertSound = () => {
        const audio = new Audio();
        
        switch (alert.severity) {
          case "critical":
            // High-pitched urgent beeps
            audio.src = "data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLbp"; 
            break;
          case "high":
            // Medium pitched warning
            audio.src = "data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLbp";
            break;
          case "medium":
            // Gentle notification
            audio.src = "data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLbp";
            break;
          default:
            return; // No sound for low severity
        }
        
        audio.volume = 0.5;
        audio.play().catch(e => console.log("Audio play failed:", e));
      };

      playAlertSound();
    }
  }, [audioEnabled, isVisible, alert.severity]);

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return <AlertTriangle className="h-5 w-5 text-red-600 animate-pulse" />;
      case "high":
        return <AlertTriangle className="h-5 w-5 text-orange-600" />;
      case "medium":
        return <Clock className="h-5 w-5 text-yellow-600" />;
      default:
        return <Eye className="h-5 w-5 text-blue-600" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "border-red-500 bg-red-50 dark:bg-red-950";
      case "high":
        return "border-orange-500 bg-orange-50 dark:bg-orange-950";
      case "medium":
        return "border-yellow-500 bg-yellow-50 dark:bg-yellow-950";
      default:
        return "border-blue-500 bg-blue-50 dark:bg-blue-950";
    }
  };

  const getSeverityBadge = (severity: string) => {
    switch (severity) {
      case "critical":
        return <Badge className="bg-red-600 text-white">CRITICAL</Badge>;
      case "high":
        return <Badge className="bg-orange-600 text-white">HIGH</Badge>;
      case "medium":
        return <Badge className="bg-yellow-600 text-white">MEDIUM</Badge>;
      default:
        return <Badge className="bg-blue-600 text-white">LOW</Badge>;
    }
  };

  const getPriorityBadge = (priority: string) => {
    switch (priority) {
      case "immediate":
        return <Badge variant="destructive" className="animate-pulse">IMMEDIATE</Badge>;
      case "urgent":
        return <Badge className="bg-orange-600 text-white">URGENT</Badge>;
      case "normal":
        return <Badge variant="secondary">NORMAL</Badge>;
      default:
        return <Badge variant="outline">LOW</Badge>;
    }
  };

  const getTimeAgo = (dateString: string) => {
    const now = new Date();
    const alertTime = new Date(dateString);
    const diffMs = now.getTime() - alertTime.getTime();
    const diffSeconds = Math.floor(diffMs / 1000);
    
    if (diffSeconds < 60) return `${diffSeconds}s ago`;
    if (diffSeconds < 3600) return `${Math.floor(diffSeconds / 60)}m ago`;
    return `${Math.floor(diffSeconds / 3600)}h ago`;
  };

  const getPositionClasses = (position: string) => {
    switch (position) {
      case "top-left":
        return "top-4 left-4";
      case "top-right":
        return "top-4 right-4";
      case "bottom-left":
        return "bottom-4 left-4";
      case "bottom-right":
        return "bottom-4 right-4";
      case "center":
        return "top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2";
      default:
        return "top-4 right-4";
    }
  };

  const handleAction = async (action: () => Promise<void>) => {
    setIsProcessing(true);
    try {
      await action();
      toast({
        title: "Action completed successfully",
        description: "The alert has been processed",
      });
      onClose();
    } catch (error) {
      toast({
        title: "Action failed",
        description: "Please try again or contact support",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, scale: 0.8, y: -20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.8, y: -20 }}
          transition={{ type: "spring", duration: 0.5 }}
          className={`fixed ${getPositionClasses(position)} z-50 w-96 max-w-[90vw]`}
          data-testid={`alert-popup-${alert.id}`}
        >
          <Card className={`border-2 shadow-2xl ${getSeverityColor(alert.severity)}`}>
            {/* Header */}
            <CardHeader className="pb-2">
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-3">
                  {getSeverityIcon(alert.severity)}
                  <div>
                    <CardTitle className="text-lg font-bold">
                      {alert.title}
                    </CardTitle>
                    <div className="flex items-center gap-2 mt-1">
                      {getSeverityBadge(alert.severity)}
                      {getPriorityBadge(alert.priority)}
                    </div>
                  </div>
                </div>
                <div className="flex items-center gap-1">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setAudioEnabled(!audioEnabled)}
                    data-testid={`button-audio-toggle-${alert.id}`}
                  >
                    {audioEnabled ? 
                      <Volume2 className="h-4 w-4" /> : 
                      <VolumeX className="h-4 w-4" />
                    }
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={onClose}
                    data-testid={`button-close-${alert.id}`}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </div>

              {/* Location and Time */}
              <div className="flex items-center justify-between text-sm text-muted-foreground">
                <div className="flex items-center gap-1">
                  <MapPin className="h-3 w-3" />
                  <span>{alert.location?.area || "Unknown location"}</span>
                  {alert.cameraId && (
                    <>
                      <span>â€¢</span>
                      <Camera className="h-3 w-3" />
                      <span>{alert.cameraId}</span>
                    </>
                  )}
                </div>
                <span>{getTimeAgo(alert.createdAt)}</span>
              </div>
            </CardHeader>

            <CardContent className="space-y-4">
              {/* Alert Message */}
              <p className="text-sm font-medium">{alert.message}</p>

              {/* Alert Snapshot */}
              {alert.snapshot && (
                <div className="relative">
                  <img
                    src={alert.snapshot}
                    alt="Alert evidence"
                    className="w-full h-32 object-cover rounded-md border"
                    data-testid={`img-snapshot-${alert.id}`}
                  />
                  <div className="absolute top-2 right-2">
                    <Badge variant="secondary" className="text-xs">
                      Live Feed
                    </Badge>
                  </div>
                </div>
              )}

              {/* Confidence and metadata */}
              {alert.metadata?.confidence && (
                <div className="flex items-center gap-2">
                  <span className="text-sm text-muted-foreground">Confidence:</span>
                  <Badge variant="outline">{alert.metadata.confidence}%</Badge>
                  <Progress 
                    value={alert.metadata.confidence} 
                    className="flex-1 h-2"
                  />
                </div>
              )}

              {/* Tags */}
              {alert.metadata?.tags && alert.metadata.tags.length > 0 && (
                <div className="flex flex-wrap gap-1">
                  {alert.metadata.tags.map((tag, index) => (
                    <Badge key={index} variant="outline" className="text-xs">
                      {tag}
                    </Badge>
                  ))}
                </div>
              )}

              {/* Auto-close timer for low priority alerts */}
              {(alert.severity === "low" || alert.severity === "medium") && timeRemaining > 0 && (
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <span>Auto-close in {timeRemaining}s</span>
                    <span>{Math.round((timeRemaining / autoCloseTimeout) * 100)}%</span>
                  </div>
                  <Progress 
                    value={(timeRemaining / autoCloseTimeout) * 100} 
                    className="h-1"
                  />
                </div>
              )}

              {/* Action Buttons */}
              <div className="flex flex-wrap gap-2 pt-2">
                <Button
                  size="sm"
                  onClick={() => handleAction(() => Promise.resolve(onAcknowledge(alert.id, notes)))}
                  disabled={isProcessing}
                  data-testid={`button-acknowledge-${alert.id}`}
                  className="bg-green-600 hover:bg-green-700 text-white"
                >
                  <CheckCircle className="h-4 w-4 mr-1" />
                  Acknowledge
                </Button>

                <Button
                  size="sm"
                  variant="outline"
                  onClick={() => handleAction(() => Promise.resolve(onDismiss(alert.id, "User dismissed")))}
                  disabled={isProcessing}
                  data-testid={`button-dismiss-${alert.id}`}
                >
                  <X className="h-4 w-4 mr-1" />
                  Dismiss
                </Button>

                {alert.cameraId && (
                  <Button
                    size="sm"
                    variant="secondary"
                    onClick={() => onViewCamera(alert.cameraId!)}
                    data-testid={`button-view-camera-${alert.id}`}
                  >
                    <Eye className="h-4 w-4 mr-1" />
                    View Camera
                  </Button>
                )}

                {(alert.severity === "high" || alert.severity === "critical") && (
                  <Button
                    size="sm"
                    variant="destructive"
                    onClick={() => handleAction(() => Promise.resolve(onEscalate(alert.id, "critical", "Manual escalation")))}
                    disabled={isProcessing}
                    data-testid={`button-escalate-${alert.id}`}
                  >
                    <AlertTriangle className="h-4 w-4 mr-1" />
                    Escalate
                  </Button>
                )}
              </div>

              {/* Response time indicator */}
              {alert.responseTime && (
                <div className="text-xs text-muted-foreground border-t pt-2">
                  Expected response time: {alert.responseTime}s
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

export default AlertPopup;